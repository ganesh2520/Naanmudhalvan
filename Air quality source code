# air_quality_prediction.py

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import joblib

# Load dataset
df = pd.read_csv('air_quality_data.csv')

# Data Preprocessing
# Drop rows with missing target (AQI) and fill others
if 'AQI' in df.columns:
    df = df.dropna(subset=['AQI'])
df.fillna(method='ffill', inplace=True)

# Drop duplicates
df.drop_duplicates(inplace=True)

# Feature Engineering: extract time features if datetime column exists
if 'datetime' in df.columns:
    df['datetime'] = pd.to_datetime(df['datetime'])
    df['hour'] = df['datetime'].dt.hour
    df['day'] = df['datetime'].dt.day
    df['month'] = df['datetime'].dt.month
    df.drop(columns=['datetime'], inplace=True)

# Define feature columns and target
features = [col for col in df.columns if col != 'AQI']
target = 'AQI'

X = df[features]
y = df[target]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Model Training
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Prediction and Evaluation
y_pred = model.predict(X_test_scaled)
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)
print(f"RMSE: {rmse:.2f}")
print(f"R^2 Score: {r2:.2f}")

# Save model and scaler
joblib.dump(model, 'aqi_model.pkl')
joblib.dump(scaler, 'scaler.pkl')
